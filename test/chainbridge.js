// Generated by CoffeeScript 2.5.1
(function() {
  var ChainShuttle, TruffleAssert, bridgeConf, erc20Json, should;

  should = require('should');

  TruffleAssert = require('truffle-assertions');

  bridgeConf = require('../env/docker/chainbridge/.config.json');

  erc20Json = require('./resources/ERC20PresetMinterPauser.json');

  ChainShuttle = artifacts.require('ChainShuttle');

  contract('ChainShuttle', function(accounts) {
    var shuttle, taxi;
    shuttle = {};
    taxi = {};
    before(async function() {
      shuttle = (await ChainShuttle.deployed());
      taxi = new web3.eth.Contract(erc20Json.abi, bridgeConf.chains[0].info.erc20Address);
      await shuttle.setUpBridge(bridgeConf.chains[0].opts.bridge, bridgeConf.chains[0].opts.erc20Handler, '0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69500', bridgeConf.chains[0].opts.genericHandler, '0x000000000000000000000000000000f44be64d2de895454c3467021928e55e00');
      await shuttle.newCompany('ChainTaxi', 1, shuttle.address, taxi._address, taxi._address);
      return (await shuttle.newShuttle(0, 2));
    });
    beforeEach(async function() {
      return (await shuttle.setUpBridge(bridgeConf.chains[0].opts.bridge, bridgeConf.chains[0].opts.erc20Handler, '0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69500', bridgeConf.chains[0].opts.genericHandler, '0x000000000000000000000000000000f44be64d2de895454c3467021928e55e00'));
    });
    describe('setUpBridge(_bridge,_erc20Handler,_erc20HandlerID,_genericHandler,_genericHandlerID)', function() {
      it('set up bridge params in contract state', async function() {
        var newBridgeAddress, newErc20HandlerAddress, newGenericHandlerAddress, newResourceID;
        await shuttle.setUpBridge(shuttle.address, shuttle.address, '0x0000000000000000000000000000000000000000000000000000000000000001', shuttle.address, '0x0000000000000000000000000000000000000000000000000000000000000001');
        newBridgeAddress = (await shuttle.bridgeAddress());
        newBridgeAddress.should.eql(shuttle.address);
        newErc20HandlerAddress = (await shuttle.erc20HandlerAddress());
        newErc20HandlerAddress.should.eql(shuttle.address);
        newGenericHandlerAddress = (await shuttle.genericHandlerAddress());
        newGenericHandlerAddress.should.eql(shuttle.address);
        newResourceID = (await shuttle.erc20HandlerID());
        return newResourceID.should.eql('0x0000000000000000000000000000000000000000000000000000000000000001');
      });
      return it('when `_bridgeAddress` is not a contract, revert transaction', async function() {
        return (await TruffleAssert.reverts(shuttle.setUpBridge(accounts[0], accounts[0], '0x0000000000000000000000000000000000000000000000000000000000000001', accounts[0], '0x0000000000000000000000000000000000000000000000000000000000000001')));
      });
    });
    describe('newCompany(_name,_destChainID,_mirror,_localToken,_destToken)', function() {
      it('create a new company to transfer erc20 tokens', async function() {
        var newCompany, result;
        result = (await shuttle.newCompany('ChainTaxi2', 1, shuttle.address, taxi._address, taxi._address));
        newCompany = (await shuttle.getCompany(1));
        newCompany.name.should.eql('ChainTaxi2');
        newCompany.destChainID.toNumber().should.eql(1);
        newCompany.mirror.should.eql(shuttle.address);
        newCompany.localToken.should.eql(taxi._address);
        newCompany.destToken.should.eql(taxi._address);
        return TruffleAssert.eventEmitted(result, 'NewCompany', {
          companyID: web3.utils.toBN(1)
        });
      });
      return it('when `_localToken` is not a contract, revert transaction', async function() {
        return (await TruffleAssert.reverts(shuttle.newCompany('Revert', 1, accounts[0], accounts[0], accounts[0])));
      });
    });
    describe('newShuttle(_companyID,_capacity)', function() {
      it('create a new shuttle to transfer erc20 tokens', async function() {
        var newShuttle, result;
        result = (await shuttle.newShuttle(0, 100));
        newShuttle = (await shuttle.getShuttle(1));
        newShuttle.companyID.toNumber().should.eql(0);
        newShuttle.capacity.toNumber().should.eql(100);
        return TruffleAssert.eventEmitted(result, 'NewShuttle', {
          shuttleID: web3.utils.toBN(1),
          companyID: web3.utils.toBN(0),
          capacity: web3.utils.toBN(100)
        });
      });
      return it('when `_companyID` does not exists, revert transaction', async function() {
        return (await TruffleAssert.reverts(shuttle.newShuttle(2, 10)));
      });
    });
    return describe('registerDeposit(_shuttleID,_to,_amount)', function() {
      it('register a new erc20 deposit', async function() {
        var allowedTranfer, amount, deposit, result, shuttleBalance;
        amount = 10000;
        await taxi.methods.mint(accounts[0], 1000000).send({
          from: accounts[0]
        });
        await taxi.methods.approve(shuttle.address, amount).send({
          from: accounts[0]
        });
        allowedTranfer = (await taxi.methods.allowance(accounts[0], shuttle.address).call());
        result = (await shuttle.registerDeposit(0, accounts[0], amount, {
          from: accounts[0],
          value: web3.utils.toWei('0.025', 'ether')
        }));
        deposit = (await shuttle.getDeposit(0, accounts[0]));
        deposit.recipient.should.eql(accounts[0]);
        deposit.amount.toNumber().should.eql(amount);
        shuttleBalance = (await taxi.methods.balanceOf(shuttle.address).call());
        Number(shuttleBalance).should.eql(amount);
        return TruffleAssert.eventEmitted(result, 'DepositRegistered', {
          shuttleID: web3.utils.toBN(0),
          from: accounts[0],
          amount: web3.utils.toBN(amount)
        });
      });
      //   it 'register enough transfers to trigger a deposit on the bridge', ->
      //     amount = 10000
      //     await taxi.methods.mint(accounts[0], 1000000).send {from: accounts[0]}
      //     await taxi.methods.approve(shuttle.address, amount * 2).send {from: accounts[0]}
      //     allowedTranfer = await taxi.methods.allowance(accounts[0], shuttle.address).call()

      //     await shuttle.registerTransfer(
      //       accounts[0], taxi._address, amount
      //       {from: accounts[0], value: web3.utils.toWei('0.05', 'ether')}
      //     )
      //     result = await shuttle.registerTransfer(
      //       accounts[0], taxi._address, amount
      //       {from: accounts[0], value: web3.utils.toWei('0.05', 'ether')}
      //     )
      //     TruffleAssert.eventEmitted result, 'TokensSentToBridge'

      //     payload = await shuttle.getPayload(taxi._address)
      //     console.log(payload.toString())
      return it('when `msg.sender` did not approve to withdraw `_amount`, revert transaction', async function() {
        return (await TruffleAssert.reverts(shuttle.registerDeposit(0, accounts[0], 10000, {
          from: accounts[0],
          value: web3.utils.toWei('0.025', 'ether')
        })));
      });
    });
  });

}).call(this);
