// Generated by CoffeeScript 2.5.1
(function() {
  var ChainShuttle, FOOToken, should, truffleAssert;

  should = require('should');

  truffleAssert = require('truffle-assertions');

  ChainShuttle = artifacts.require('ChainShuttle');

  FOOToken = artifacts.require('FOOToken');

  contract('ChainShuttle', function(accounts) {
    var foo, shuttle;
    shuttle = {};
    foo = {};
    before('setup contract', async function() {
      shuttle = (await ChainShuttle.deployed());
      foo = (await FOOToken.deployed());
      return (await shuttle.setBridgeAddress(shuttle.address));
    });
    describe('setBrideAddress(address)', function() {
      it('when `address` is a contract, succeed', async function() {
        var newAddress;
        await shuttle.setBridgeAddress(shuttle.address);
        newAddress = (await shuttle.bridgeAddress());
        return newAddress.should.eql(shuttle.address);
      });
      return it('when `address` is not a contract, revert transaction', async function() {
        return (await truffleAssert.reverts(shuttle.setBridgeAddress(accounts[0])));
      });
    });
    return it('registerTransfer', async function() {
      var allowedTranfer, shuttleBalance;
      await foo.approve(shuttle.address, 10000);
      allowedTranfer = (await foo.allowance(accounts[0], shuttle.address));
      allowedTranfer.toNumber().should.eql(10000);
      // await shuttle.registerTransfer accounts[0], foo.address, 10000
      await foo.transferFrom(accounts[0], shuttle.address, 10000);
      shuttleBalance = (await foo.balanceOf(shuttle.addres));
      return shuttleBalance.should.eql(10000);
    });
  });

  // firstTransfer = await shuttle.getOpenDeliveryTransfer(0)
// firstTransfer.sender.should.eql accounts[0]
// firstTransfer.recipient.should.eql accounts[0]
// firstTransfer.amount.should.eql 10000

}).call(this);
