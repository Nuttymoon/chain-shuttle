// Generated by CoffeeScript 2.5.1
(function() {
  var Bridge, ChainShuttle, Contract, Taxi, TruffleAssert, bridgeConf, bridgeJson, erc20Json, should, staticAddr;

  should = require('should');

  Contract = require('@truffle/contract');

  TruffleAssert = require('truffle-assertions');

  bridgeConf = require('../env/docker/chainbridge/.config.json');

  staticAddr = require('../env/.addresses.json');

  erc20Json = require('./contract-abis/ERC20PresetMinterPauser.json');

  bridgeJson = require('./contract-abis/Bridge.json');

  ChainShuttle = artifacts.require('ChainShuttle');

  // Bridge contracts
  Bridge = Contract({
    abi: bridgeJson.abi,
    unlinked_binary: bridgeJson.bytecode
  });

  Bridge.setProvider(web3.currentProvider);

  Taxi = Contract({
    abi: erc20Json.abi,
    unlinked_binary: erc20Json.bytecode
  });

  Taxi.setProvider(web3.currentProvider);

  contract('ChainShuttle - setup functions (source chain)', function(accounts) {
    var shuttle, taxi;
    shuttle = {};
    taxi = {};
    Taxi.defaults({
      from: accounts[0]
    });
    before(async function() {
      // Load contracts
      shuttle = (await ChainShuttle.deployed());
      taxi = (await Taxi.at(bridgeConf.chains[0].info.erc20Address));
      return console.log(`\t
  ChainShuttle address (Ethereum): ${shuttle.address}
  TaxiToken address (Ethereum): ${taxi.address}
\t`);
    });
    beforeEach(async function() {
      return (await shuttle.setUpBridge(bridgeConf.chains[0].opts.bridge, bridgeConf.chains[0].opts.erc20Handler, '0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69500', bridgeConf.chains[0].opts.genericHandler, '0x000000000000000000000000000000f44be64d2de895454c3467021928e55e00'));
    });
    describe('setUpBridge(_bridge,_erc20Handler,_erc20ResourceID,_genericHandler,_shuttleResourceID)', function() {
      it('set up bridge params in contract state', async function() {
        var newBridgeAddress, newErc20HandlerAddress, newGenericHandlerAddress, newResourceID;
        await shuttle.setUpBridge(shuttle.address, shuttle.address, '0x0000000000000000000000000000000000000000000000000000000000000001', shuttle.address, '0x0000000000000000000000000000000000000000000000000000000000000001');
        newBridgeAddress = (await shuttle.bridgeAddress());
        newBridgeAddress.should.eql(shuttle.address);
        newErc20HandlerAddress = (await shuttle.erc20HandlerAddress());
        newErc20HandlerAddress.should.eql(shuttle.address);
        newGenericHandlerAddress = (await shuttle.genericHandlerAddress());
        newGenericHandlerAddress.should.eql(shuttle.address);
        newResourceID = (await shuttle.erc20ResourceID());
        return newResourceID.should.eql('0x0000000000000000000000000000000000000000000000000000000000000001');
      });
      return it('when `_bridgeAddress` is not a contract, revert transaction', async function() {
        return (await TruffleAssert.reverts(shuttle.setUpBridge(accounts[0], accounts[0], '0x0000000000000000000000000000000000000000000000000000000000000001', accounts[0], '0x0000000000000000000000000000000000000000000000000000000000000001')));
      });
    });
    describe('setCompany(_name,_destChainID,_mirror,_token)', function() {
      it('create a new company to transfer erc20 tokens', async function() {
        var newCompany, result;
        result = (await shuttle.setCompany(0, 'ChainTaxi', 1, shuttle.address, taxi.address));
        newCompany = (await shuttle.getCompany(0));
        newCompany.name.should.eql('ChainTaxi');
        newCompany.destChainID.toNumber().should.eql(1);
        newCompany.mirror.should.eql(shuttle.address);
        newCompany.token.should.eql(taxi.address);
        return TruffleAssert.eventEmitted(result, 'CompanyUpdate', {
          companyID: web3.utils.toBN(0)
        });
      });
      return it('when `_token` is not a contract, revert transaction', async function() {
        return (await TruffleAssert.reverts(shuttle.setCompany(1, 'Revert', 1, accounts[0], accounts[0])));
      });
    });
    return describe('initCapacity(_companyID,_capacity)', function() {
      return it('allow a new shuttle capacity for a company and create the first shuttle', async function() {
        var newShuttle, newShuttleID, result;
        result = (await shuttle.initCapacity(0, 100));
        newShuttleID = (await shuttle.activeShuttles(0, 100));
        newShuttle = (await shuttle.getShuttle(newShuttleID.toNumber()));
        newShuttle.companyID.toNumber().should.eql(0);
        newShuttle.capacity.toNumber().should.eql(100);
        newShuttle.status.toNumber().should.eql(0);
        TruffleAssert.eventEmitted(result, 'CapacityInit', {
          companyID: web3.utils.toBN(0),
          capacity: web3.utils.toBN(100)
        });
        return TruffleAssert.eventEmitted(result, 'ShuttleCreation', {
          shuttleID: web3.utils.toBN(0),
          companyID: web3.utils.toBN(0),
          capacity: web3.utils.toBN(100)
        });
      });
    });
  });

  contract('ChainShuttle - shuttle functions (source chain)', function(accounts) {
    var bridge, depositNonce, shuttle, taxi;
    shuttle = {};
    taxi = {};
    bridge = {};
    Bridge.defaults({
      from: accounts[0]
    });
    Taxi.defaults({
      from: accounts[0]
    });
    depositNonce = 0;
    before(async function() {
      var acc, i, len;
      shuttle = (await ChainShuttle.deployed());
      bridge = (await Bridge.at(bridgeConf.chains[0].opts.bridge));
      taxi = (await Taxi.at(bridgeConf.chains[0].info.erc20Address));
      console.log(`\t
  ChainBridge address (Ethereum): ${bridge.address}
  ChainShuttle address (Ethereum): ${shuttle.address}
  ChainShuttle address (Avalanche): ${staticAddr.avalanche.chainShuttle}
  TaxiToken address (Ethereum): ${taxi.address}

  Registering ChainShuttle contract on the bridge...
\t`);
      await bridge.adminSetGenericResource(bridgeConf.chains[0].opts.genericHandler, '0x000000000000000000000000000000f44be64d2de895454c3467021928e55e00', shuttle.address, '0x00000000', web3.eth.abi.encodeFunctionSignature('offloadShuttle(bytes)'));
      for (i = 0, len = accounts.length; i < len; i++) {
        acc = accounts[i];
        await taxi.mint(acc, 1000000);
      }
      // Setup ChainShuttle to enable transfers
      await shuttle.setUpBridge(bridgeConf.chains[0].opts.bridge, bridgeConf.chains[0].opts.erc20Handler, '0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69500', bridgeConf.chains[0].opts.genericHandler, '0x000000000000000000000000000000f44be64d2de895454c3467021928e55e00');
      await shuttle.setCompany(0, 'ChainTaxi', 1, staticAddr.avalanche.chainShuttle, taxi.address);
      return (await shuttle.initCapacity(0, 2));
    });
    describe('registerDeposit(_companyID,_capacity,_to,_amount)', function() {
      it('register a new erc20 deposit', async function() {
        var amount, deposit, result, shuttleBalance;
        amount = 10000;
        await taxi.approve(shuttle.address, amount);
        result = (await shuttle.registerDeposit(0, 2, accounts[0], amount, {
          from: accounts[0],
          value: web3.utils.toWei('0.075', 'ether')
        }));
        deposit = (await shuttle.getDeposit(0, accounts[0]));
        deposit.recipient.should.eql(accounts[0]);
        deposit.amount.toNumber().should.eql(amount);
        shuttleBalance = (await taxi.balanceOf(shuttle.address));
        shuttleBalance.toNumber().should.eql(amount);
        return TruffleAssert.eventEmitted(result, 'DepositRegistration', {
          shuttleID: web3.utils.toBN(0),
          from: accounts[0],
          amount: web3.utils.toBN(amount)
        });
      });
      it('when `msg.sender` has already registered a deposit in the shuttle, revert transaction', async function() {
        var amount;
        amount = 10000;
        await taxi.approve(shuttle.address, amount);
        return (await TruffleAssert.reverts(shuttle.registerDeposit(0, 2, accounts[0], amount, {
          from: accounts[0],
          value: web3.utils.toWei('0.075', 'ether')
        })));
      });
      it('when `msg.sender` did not approve to withdraw `_amount`, revert transaction', async function() {
        return (await TruffleAssert.reverts(shuttle.registerDeposit(0, 2, accounts[1], 10000, {
          from: accounts[1],
          value: web3.utils.toWei('0.075', 'ether')
        })));
      });
      return it('register enough transfers and trigger a deposit on the bridge', async function() {
        var amount, bridgeEvents, result, shuttleBalance, shuttleState;
        amount = 10000;
        await taxi.approve(shuttle.address, amount, {
          from: accounts[1]
        });
        result = (await shuttle.registerDeposit(0, 2, accounts[1], amount, {
          from: accounts[1],
          value: web3.utils.toWei('0.075', 'ether')
        }));
        TruffleAssert.eventEmitted(result, 'ShuttleBoardingComplete', {
          shuttleID: web3.utils.toBN(0),
          totalAmount: web3.utils.toBN(amount * 2)
        });
        shuttleState = (await shuttle.getShuttle(0));
        shuttleState.status.toNumber().should.eql(1);
        shuttleBalance = (await taxi.balanceOf(shuttle.address));
        shuttleBalance.toNumber().should.eql(0);
        bridgeEvents = (await bridge.getPastEvents('Deposit', {
          fromBlock: 0
        }));
        return depositNonce = bridgeEvents.pop().args.depositNonce.toNumber();
      });
    });
    describe('sendShuttleData(_shuttleID,_depositNonce,_bridgeFee)', function() {
      return it('send the shuttle data to trigger the offload', async function() {
        var result, shuttleState;
        result = (await shuttle.sendShuttleData(0, depositNonce, web3.utils.toWei('0.05', 'ether')));
        shuttleState = (await shuttle.getShuttle(0));
        return shuttleState.status.toNumber().should.eql(2);
      });
    });
    describe('offloadShuttle(_data)', function() {
      it('offload the shuttle data to register claimable deposits', async function() {
        var claim1, claim2, result, shuttleData;
        // Setup accounts[0] as genericHandler to be able to call function
        await shuttle.setUpBridge(bridgeConf.chains[0].opts.bridge, bridgeConf.chains[0].opts.erc20Handler, '0x000000000000000000000000000000e389d61c11e5fe32ec1735b3cd38c69500', accounts[0], '0x000000000000000000000000000000f44be64d2de895454c3467021928e55e00');
        shuttleData = `0x0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000${accounts[0].substr(2).padStart(64, '0')}${accounts[1].substr(2).padStart(64, '0')}00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000002710`;
        result = (await shuttle.offloadShuttle(shuttleData));
        claim1 = (await shuttle.claimableAmounts(0, accounts[0]));
        claim1.toNumber().should.eql(10000);
        claim2 = (await shuttle.claimableAmounts(0, accounts[0]));
        claim2.toNumber().should.eql(10000);
        return TruffleAssert.eventEmitted(result, 'ShuttleOffload', {
          companyID: web3.utils.toBN(0),
          capacity: web3.utils.toBN(2)
        });
      });
      return it('if `msg.sender` is not the bridge GenericHandler, revert transaction', async function() {
        var shuttleData;
        shuttleData = `0x0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000${accounts[0].substr(2).padStart(64, '0')}${accounts[1].substr(2).padStart(64, '0')}00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000002710`;
        return (await TruffleAssert.reverts(shuttle.offloadShuttle(shuttleData, {
          from: accounts[1]
        })));
      });
    });
    return describe('claimDeposit(_companyID)', function() {
      it('claim a pending deposit', async function() {
        var accBalanceAfter, accBalanceBefore, result;
        accBalanceBefore = (await taxi.balanceOf(accounts[0]));
        await taxi.mint(shuttle.address, 10000);
        result = (await shuttle.claimDeposit(0));
        accBalanceAfter = (await taxi.balanceOf(accounts[0]));
        (accBalanceAfter.toNumber() - accBalanceBefore.toNumber()).should.eql(10000);
        return TruffleAssert.eventEmitted(result, 'DepositClaim', {
          companyID: web3.utils.toBN(0),
          recipient: accounts[0],
          amount: web3.utils.toBN(10000)
        });
      });
      return it('if no available deposit, revert transaction', async function() {
        return (await TruffleAssert.reverts(shuttle.claimDeposit(0, {
          from: accounts[3]
        })));
      });
    });
  });

}).call(this);
