// Generated by CoffeeScript 2.5.1
(function() {
  var Bridge, ChainShuttle, Contract, Taxi, TruffleAssert, bridgeConf, bridgeJson, erc20Json, should, staticAddr;

  should = require('should');

  Contract = require('@truffle/contract');

  TruffleAssert = require('truffle-assertions');

  bridgeConf = require('../env/docker/chainbridge/.config.json');

  staticAddr = require('../env/.addresses.json');

  erc20Json = require('./contract-abis/ERC20PresetMinterPauser.json');

  bridgeJson = require('./contract-abis/Bridge.json');

  ChainShuttle = artifacts.require('ChainShuttle');

  // Bridge contracts
  Bridge = Contract({
    abi: bridgeJson.abi,
    unlinked_binary: bridgeJson.bytecode
  });

  Bridge.setProvider(web3.currentProvider);

  Taxi = Contract({
    abi: erc20Json.abi,
    unlinked_binary: erc20Json.bytecode
  });

  Taxi.setProvider(web3.currentProvider);

  contract('ChainShuttle - cross-chain tests', function(accounts) {
    var bridge, depositNonce, shuttle, taxi;
    shuttle = {};
    taxi = {};
    bridge = {};
    Bridge.defaults({
      from: accounts[0]
    });
    Taxi.defaults({
      from: accounts[0]
    });
    depositNonce = 0;
    before(async function() {
      shuttle = (await ChainShuttle.at(staticAddr.avalanche.chainShuttle));
      bridge = (await Bridge.at(bridgeConf.chains[1].opts.bridge));
      taxi = (await Taxi.at(bridgeConf.chains[1].info.erc20Address));
      return console.log(`\t
  ChainBridge address: ${bridge.address}
  ChainShuttle address (Avalanche): ${shuttle.address}
  TaxiToken address: ${taxi.address}
\t`);
    });
    it('check shuttle contract balance after deposit', async function() {
      var shuttleBalance, totalAmount;
      totalAmount = 20000;
      shuttleBalance = (await taxi.balanceOf(shuttle.address));
      return shuttleBalance.toNumber().should.eql(totalAmount);
    });
    return it('check that claimable deposits are registered', async function() {
      var claim1, claim2;
      claim1 = (await shuttle.claimableAmounts(0, accounts[0]));
      claim1.toNumber().should.eql(10000);
      claim2 = (await shuttle.claimableAmounts(0, accounts[0]));
      return claim2.toNumber().should.eql(10000);
    });
  });

}).call(this);
